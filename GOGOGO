#define FQUALITY 10.0
#define FPMULT   2.0
#define FPBASE   2.0
#define FSMULT   2.0
#define FSBASE   2.0
#define FNMULT   0.5
#define FNBASE   0.5

#define GSTD 0.333333333333

#define PI 3.1415926535897932384626

//	Simplex 3D Noise 
//	by Ian McEwan, Ashima Arts
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return (21.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) ))+0.5;
}

float fnoise(vec3 p) {
    float o = 0.0;
    for (float i = 0.0; i < FQUALITY; i++) {
        o+=snoise((p*FPMULT*pow(FPBASE,i))+(FSMULT*pow(FSBASE,i)))*pow(FNBASE,i)*FNMULT;
    }
    return o;
}

float gaussian(vec2 p) {
    return exp(-dot(p,p)/(2.0*GSTD*GSTD))/(2.0*PI*GSTD*GSTD);
}
float gaussian(vec2 p,vec2 c) {
    return gaussian(p-c);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    float t = iTime/8.0;
    vec3 uvt = vec3(uv,t);
    float prMix = fnoise(uvt)/2.0;
    float mbMix = fnoise(uvt+1.0)/2.0;
    float star0 = fnoise(uvt*24.0);
    float star1 = fnoise(uvt*12.0+star0);
    float star2 = fnoise(uvt*6.0+star1);
    float star3 = fnoise(uvt+star2);
    float star4 = fnoise((uvt/24.0)+star3);
    float star5 = fnoise((uvt/12.0)+star4);
    float star6 = fnoise((uvt/6.0)+star5);
    float star7 = fnoise(uvt+star6);
    vec3 cPurple = vec3(1.0/3.0,0.0,0.5);
    vec3 cRed = vec3(1.0,0.0,0.5);
    vec3 cBlue = vec3(0.0,0.0,0.5);
    vec3 cStar = vec3(0.875,0.875,1.0);
    vec3 col = mix(mix(mix(cPurple,cRed,prMix),cBlue,mbMix),cStar,pow(star0*star1*star2*star3*star4*star5*star6*star7*24.0,2.0));
    col*=gaussian(uv.xy,vec2(0.5,0.5));
    
    // Output to screen
    fragColor = vec4(col,1.0);
}
